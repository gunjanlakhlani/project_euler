'''
Problem 2: 
    
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be: 
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.
'''

def fibonacci(fib_max: int) -> list:
    '''
    Computes fibbonacci numbers upto fib_max and returns the list of fibonacci
    numbers
    '''
    fib = [1, 2]
    while fib[-1] <= fib_max:
        fib.append(fib[-1] + fib[-2])
    return fib[:-1]

if __name__ == "__main__":
    
    #set fib_max 
    fib_max = 4000000
    #compute the fibonacci numbers less than or equal to fib_max
    fib_list = fibonacci(fib_max)
    #sum all the even fibonacci numbers from fib_list
    sum_even_fib = sum([val for val in fib_list if val%2 == 0])
    #print answer
    answer = f"\nThe sum of all the even fibonacci numbers whose value do not "
    answer += f"{fib_max} is: {sum_even_fib}.\n"
    print(answer)

